type Query {
  business(sbi: ID!): Business
  customer(crn: ID!): Customer
  permissionGroups: [PermissionGroup]
}

type Phone {
  mobile: String
  landline: String
}

type Email {
  address: String
  validated: Boolean
}

type Address {
  pafOrganisationName: String
  line1: String
  line2: String
  line3: String
  line4: String
  line5: String
  buildingNumberRange: String
  buildingName: String
  flatName: String
  street: String
  city: String
  county: String
  postalCode: String
  country: String
  uprn: String
  dependentLocality: String
  doubleDependentLocality: String
  typeId: String
}

type EntityStatus {
  locked: Boolean
  confirmed: Boolean
  deactivated: Boolean
}

scalar Date

type Agreement {
  contractId: ID
  name: String
  status: String
  contractType: String
  schemeYear: Int
  startDate: Date
  endDate: Date
  paymentSchedules: [PaymentSchedule]
}

type PaymentSchedule {
  optionCode: String
  optionDescription: String
  commitmentGroupStartDate: Date
  commitmentGroupEndDate: Date
  year: Int
  sheetName: String
  parcelName: String
  actionArea: Float
  actionMTL: Int
  actionUnits: Int
  parcelTotalArea: Float
  startDate: Date
  endDate: Date
}

type Application {
  sbi: ID!
  id: ID!
  subjectId: ID
  year: Int
  name: String
  moduleCode: String
  scheme: String
  statusCodeP: String
  statusCodeS: String
  status: String
  submissionDate: Date
  portalStatusP: String
  portalStatusS: String
  portalStatus: String
  active: Boolean
  transitionId: ID
  transitionName: String
  agreementReferences: [ID]
  transitionHistory: [Transition]
}

type Transition {
  id: ID
  name: String
  timestamp: Date
  checkStatus: String
}

type BusinessInfo {
  name: String
  reference: String
  vat: String
  traderNumber: String
  vendorNumber: String
  address: Address
  correspondenceAddress: Address
  isCorrespondenceAsBusinessAddress: Boolean
  email: Email
  correspondenceEmail: Email
  phone: Phone
  correspondencePhone: Phone
  legalStatus: BusinessType
  type: BusinessType
  registrationNumbers: BusinessRegistrationNumbers
  additionalSbis: [ID]
  lastUpdated: Date
  isFinancialToBusinessAddress: Boolean
  hasLandInNorthernIreland: Boolean
  hasLandInScotland: Boolean
  hasLandInWales: Boolean
  landConfirmed: Boolean
  hasAdditionalBusinessActivities: Boolean
  additionalBusinessActivities: [BusinessType]
  isAccountablePeopleDeclarationCompleted: Boolean
  dateStartedFarming: Date
  status: EntityStatus
}

type BusinessRegistrationNumbers {
  companiesHouse: String
  charityCommission: String
}

# eslint-disable-next-line @graphql-eslint/naming-convention
type BusinessType {
  code: Int
  type: String
}

type BusinessCustomer {
  personId: ID
  firstName: String
  lastName: String
  crn: String
  role: String
  permissionGroups: [ActivePermissionGroup]
}

type Business {
  organisationId: ID
  sbi: ID!
  info: BusinessInfo
  land: BusinessLand
  countyParishHoldings: [CountyParishHolding]
  customers: [BusinessCustomerPartial]
  customer(crn: ID!): BusinessCustomer
  agreements: [Agreement]
  applications: [Application]
}

type BusinessCustomerPartial {
  personId: ID
  firstName: String
  lastName: String
  crn: String
  role: String
}

type CountyParishHolding {
  cphNumber: ID
  parish: String
  startDate: Date
  endDate: Date
  species: String
  xCoordinate: Int
  yCoordinate: Int
  address: String
}

type BusinessLandParcel {
  id: ID!
  sheetId: String
  parcelId: String
  area: Float
  pendingDigitisation: Boolean
  effectiveToDate: Date
  effectiveFromDate: Date
}

type BusinessLandSummary {
  arableLandArea: Float
  permanentCropsArea: Float
  permanentGrasslandArea: Float
  totalArea: Float
  totalParcels: Float
}

type BusinessLandCover {
  id: ID!
  name: String
  area: Float
  code: String
  isBpsEligible: Boolean
}

type BusinessLand {
  parcels(date: Date): [BusinessLandParcelPartial]
  parcel(date: Date, sheetId: ID!, parcelId: ID!): BusinessLandParcel
  parcelCovers(date: Date, sheetId: ID!, parcelId: ID!): [BusinessLandCover]
  parcelLandUses(sheetId: ID!, parcelId: ID!): [BusinessLandParcelUses]
  summary(date: Date): BusinessLandSummary
}

type BusinessLandParcelUses {
  code: String!
  startDate: Date
  endDate: Date
  insertDate: Date
  deleteDate: Date
  area: Float
  length: Float
  type: String
  campaign: Int
}

type BusinessLandParcelPartial {
  id: ID!
  sheetId: String
  parcelId: String
  area: Float
  pendingDigitisation: Boolean
}

type CustomerInfo {
  name: CustomerName
  dateOfBirth: Date
  phone: Phone
  email: Email
  status: EntityStatus
  address: Address
  doNotContact: Boolean
  personalIdentifiers: [String]
}

type CustomerName {
  title: String
  otherTitle: String
  first: String
  middle: String
  last: String
}

type CustomerAuthenticationQuestions {
  memorableDate: String
  memorableEvent: String
  memorableLocation: String
  updatedAt: Date
  isFound: Boolean
}

type Customer {
  personId: ID!
  crn: ID!
  info: CustomerInfo
  authenticationQuestions: CustomerAuthenticationQuestions
  businesses: [CustomerBusinessPartial]
  business(sbi: ID!): CustomerBusiness
}

type CustomerBusinessPartial {
  organisationId: ID
  sbi: ID!
  name: String!
  role: String
}

type CustomerBusiness {
  organisationId: ID
  sbi: ID!
  name: String!
  role: String
  messages(fromDate: Date): [CustomerBusinessMessage]
  permissionGroups: [ActivePermissionGroup]
}

type CustomerBusinessMessage {
  id: ID!
  subject: String
  date: Date
  body: String
  read: Boolean
  deleted: Boolean
}

enum PermissionLevel {
  NO_ACCESS
  VIEW
  AMEND
  SUBMIT
  MAKE_LEGAL_CHANGES
  FULL_PERMISSION
}

enum PermissionGroupId {
  BASIC_PAYMENT_SCHEME
  BUSINESS_DETAILS
  COUNTRYSIDE_STEWARDSHIP_AGREEMENTS
  COUNTRYSIDE_STEWARDSHIP_APPLICATIONS
  ENTITLEMENTS
  ENVIRONMENTAL_LAND_MANAGEMENT_APPLICATIONS
  LAND_DETAILS
}

type ActivePermissionGroup {
  id: PermissionGroupId!
  level: PermissionLevel
  functions: [String]
}

type PermissionGroup {
  id: PermissionGroupId!
  name: String!
}
